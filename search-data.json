[
    
    
    
        
            {
                "id": 0,
                "href": "https://z3mu.github.io/about/",
                "title": "About",
                "section": "page",
                "date" : "0001.01.01",
                "body": "Wir müssen wissen. Wir werden wissen. (D. Hilbert)\nWe must know. We will know.\n"
            }
    
        ,
            {
                "id": 1,
                "href": "https://z3mu.github.io/2022/01/13/add-gitalk-for-comments-in-hugo/",
                "title": "Add Gitalk for Comments in Hugo",
                "section": "post",
                "date" : "2022.01.13",
                "body": "Gitalk is a comment plug-in developed based on Github Issue and Preact. It cleverly uses the function of github issue to develop a plug-in, which requires users to have a github account.\n  First, you need to choose a public github repository (existing or create a new one) for storing comments\n  Then you need to create GitHub the Application , if not click here to apply , Authorization callback URLfill out the domain name currently used plug-in page. Then you can get the Client ID and Client Secret, such as\n Client ID 194e36d3bbcd14e7def9 Client Secret 2c99c40d21596f4dc7b9f31a76467ec19c72e653   After registration, add the following code to layouts/partials/gitalk.html\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://unpkg.com/gitalk/dist/gitalk.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/gitalk@latest/dist/gitalk.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;div id=\u0026#34;gitalk-container\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; var gitalk = new Gitalk({ // gitalk main parameters  clientID: `xxxx`, //clientID  clientSecret: `xxxxx`,//clientSecret  repo: `clouda3`, //your repo name  owner: \u0026#39;clouda3\u0026#39;, //your GitHub id  admin: [\u0026#39;clouda3\u0026#39;], //your GitHub id  id: location.pathname, //The id cannot be repeated. If it is repeated, it will introduce comments from other pages.  }); gitalk.render(\u0026#39;gitalk-container\u0026#39;); \u0026lt;/script\u0026gt;   In the proper position of layouts/_default/single.html insert {{ partial \u0026quot;gitalk.html\u0026quot; . }}\n  "
            }
    
        ,
            {
                "id": 2,
                "href": "https://z3mu.github.io/2019/03/11/markdown-syntax/",
                "title": "Markdown Syntax Guide",
                "section": "post",
                "date" : "2019.03.11",
                "body": "This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item   First Sub-item Second Sub-item  Other Elements — abbr, sub, sup, kbd, mark \rGIF is a bitmap image format.\nH2O\nXn + Yn = Zn Press CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  "
            }
    
        ,
            {
                "id": 3,
                "href": "https://z3mu.github.io/2019/03/10/rich-content/",
                "title": "Rich Content",
                "section": "post",
                "date" : "2019.03.10",
                "body": "Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode    Vimeo Simple Shortcode  "
            }
    
        ,
            {
                "id": 4,
                "href": "https://z3mu.github.io/2019/03/09/simple-shortcode-to-insert-raw-html/",
                "title": "Simple Shortcode to Insert Raw HTML in Hugo",
                "section": "post",
                "date" : "2019.03.09",
                "body": "I love the simplicity of creating new content using markdown in Hugo. But sometimes, markdown is not enough – you might want to do a one-off extra-fancy thing with raw html.\nSurprisingly, Hugo doesn’t seem to have a good way to let you do this in a content file. Here is how to create your own one-line custom shortcode to make that possible.\nAdd a shortcode template to your site, in layouts/shortcodes/rawhtml.html, with the content:\n\u0026lt;!-- raw html --\u0026gt; {{.Inner}} This template tells Hugo to simply render the inner content passed to your shortcode directly into the HTML of your site.\nYou can then use this shortcode in your markdown content, like so:\n{{\u0026lt; rawhtml \u0026gt;}} \u0026lt;p class=\u0026#34;speshal-fancy-custom\u0026#34;\u0026gt; This is \u0026lt;strong\u0026gt;raw HTML\u0026lt;/strong\u0026gt;, inside Markdown. \u0026lt;/p\u0026gt; {{\u0026lt; /rawhtml \u0026gt;}} Note: to avoid parsing of shortcodes inside code blocks, just like above, you should add /* */ in your shortcode, such as {{\u0026lt;/* rawhtml */\u0026gt;}} and {{\u0026lt;/* /rawhtml */\u0026gt;}}.\nFor example, insert the following raw html, which represents a svg image.\n\u0026lt;svg class=\u0026#34;canon\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; overflow=\u0026#34;visible\u0026#34; viewBox=\u0026#34;0 0 496 373\u0026#34; height=\u0026#34;373\u0026#34; width=\u0026#34;496\u0026#34;\u0026gt;\u0026lt;g fill=\u0026#34;none\u0026#34;\u0026gt;\u0026lt;path stroke=\u0026#34;#000\u0026#34; stroke-width=\u0026#34;.75\u0026#34; d=\u0026#34;M.599 372.348L495.263 1.206M.312.633l494.95 370.853M.312 372.633L247.643.92M248.502.92l246.76 370.566M330.828 123.869V1.134M330.396 1.134L165.104 124.515\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;path stroke=\u0026#34;#ED1C24\u0026#34; stroke-width=\u0026#34;.75\u0026#34; d=\u0026#34;M275.73 41.616h166.224v249.05H275.73zM54.478 41.616h166.225v249.052H54.478z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;path stroke=\u0026#34;#000\u0026#34; stroke-width=\u0026#34;.75\u0026#34; d=\u0026#34;M.479.375h495v372h-495zM247.979.875v372\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;ellipse cx=\u0026#34;498.729\u0026#34; cy=\u0026#34;177.625\u0026#34; rx=\u0026#34;.75\u0026#34; ry=\u0026#34;1.25\u0026#34;\u0026gt;\u0026lt;/ellipse\u0026gt;\u0026lt;ellipse cx=\u0026#34;247.229\u0026#34; cy=\u0026#34;377.375\u0026#34; rx=\u0026#34;.75\u0026#34; ry=\u0026#34;1.25\u0026#34;\u0026gt;\u0026lt;/ellipse\u0026gt;\u0026lt;/g\u0026gt;\u0026lt;/svg\u0026gt; \r  .canon { background: white; width: 100%; height: auto;}  Remark: Here\u0026rsquo;s another solution. By default, Goldmark does not render raw HTMLs and potentially dangerous links. If you have lots of inline HTML and/or JavaScript, you may need to set unsafe: true. i.e.\n[markup] [markup.goldmark] [markup.goldmark.renderer] unsafe = true See documentation Goldmark Configuration 35.\n"
            }
    
        ,
            {
                "id": 5,
                "href": "https://z3mu.github.io/2019/03/08/math-typesetting/",
                "title": "Math Typesetting",
                "section": "post",
                "date" : "2019.03.08",
                "body": "Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates (for example: /layouts/partials/header.html) like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026quot;math.html\u0026quot; . }} {{ end }}  To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files.  Note: Use the online reference of Supported TeX Functions   Examples Inline math: $$ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $$\nBlock math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n"
            }
    
        ,
            {
                "id": 6,
                "href": "https://z3mu.github.io/2019/03/05/emoji-support/",
                "title": "Emoji Support",
                "section": "post",
                "date" : "2019.03.05",
                "body": "Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n😗🙈\n\u0026lt;span class=\u0026#34;nowrap\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;emojify\u0026#34;\u0026gt;🙈\u0026lt;/span\u0026gt; \u0026lt;code\u0026gt;🙈\u0026lt;/code\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;nowrap\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;emojify\u0026#34;\u0026gt;🙉\u0026lt;/span\u0026gt; \u0026lt;code\u0026gt;🙉\u0026lt;/code\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;nowrap\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;emojify\u0026#34;\u0026gt;🙊\u0026lt;/span\u0026gt; \u0026lt;code\u0026gt;🙊\u0026lt;/code\u0026gt;\u0026lt;/span\u0026gt; The Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }  .emojify { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; font-size: 2rem; vertical-align: middle; } @media screen and (max-width:650px) { .nowrap { display: block; margin: 25px 0; } } "
            }
    
        ,
            {
                "id": 7,
                "href": "https://z3mu.github.io/ebooks/",
                "title": "Ebooks",
                "section": "page",
                "date" : "0001.01.01",
                "body": " gitbook-tutorial  "
            }
    
        ,
            {
                "id": 8,
                "href": "https://z3mu.github.io/links/",
                "title": "Links",
                "section": "page",
                "date" : "0001.01.01",
                "body": " Mathematics Stack Exchange LaTeX Stack Exchange: TeX Cross Validated - Stack Exchange Home - MATLAB Central - MathWorks  "
            }
    
]
